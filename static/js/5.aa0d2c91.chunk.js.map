{"version":3,"sources":["components/common/TextError/TextError.module.css","components/common/FormikControl/Controls/Input.js","components/common/FormikControl/Controls/Textarea.js","components/common/FormikControl/Controls/Select.js","components/common/FormikControl/Controls/RadioButtons.js","components/common/FormikControl/Controls/CheckboxGroup.js","components/common/FormikControl/FormikControl.js","hoc/withAuthRedirect.js","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","components/common/TextError/TextError.js"],"names":["module","exports","Input","props","label","name","rest","className","htmlFor","id","component","TextError","Textarea","as","Select","options","map","option","value","key","RadioButtons","field","Fragment","type","checked","CheckboxGroup","includes","FormikControl","control","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","to","React","connect","DialogItem","classes","dialog","navData","isActive","Active","Item","src","photo","Message","message","messageMy","my","its","AddMessageForm","validationSchema","Yup","newMessageBody","required","initialValues","onSubmit","values","submitProps","sendMessage","console","log","resetForm","formik","placeholder","disabled","isValid","Dialogs","dialogsPage","messageElements","messages","m","dialogElements","dialogs","dialogsItems","compose","dispatch","sendMessageCreator","error","children"],"mappings":"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","file":"static/js/5.aa0d2c91.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"TextError_error__2prsr\"};","import React from 'react'\nimport { Field, ErrorMessage } from 'formik'\nimport TextError from \"../../TextError/TextError\";\n\nfunction Input (props) {\n  const { label, name, ...rest } = props\n  return (\n    <div className='form-control'>\n      <label htmlFor={name}>{label}</label>\n      <Field id={name} name={name} {...rest} />\n      <ErrorMessage component={TextError} name={name} />\n    </div>\n  )\n}\n\nexport default Input\n","import React from 'react'\nimport { Field, ErrorMessage } from 'formik'\nimport TextError from \"../../TextError/TextError\";\n\nfunction Textarea (props) {\n  const { label, name, ...rest } = props\n  return (\n    <div className='form-control'>\n      <label htmlFor={name}>{label}</label>\n      <Field as='textarea' id={name} name={name} {...rest} />\n      <ErrorMessage component={TextError} name={name} />\n    </div>\n  )\n}\n\nexport default Textarea\n","import React from 'react'\nimport { Field, ErrorMessage } from 'formik'\nimport TextError from \"../../TextError/TextError\";\n\nfunction Select (props) {\n  const { label, name, options, ...rest } = props\n  return (\n    <div className='form-control'>\n      <label htmlFor={name}>{label}</label>\n      <Field as='select' id={name} name={name} {...rest}>\n        {options.map(option => {\n          return (\n            <option key={option.value} value={option.value}>\n              {option.key}\n            </option>\n          )\n        })}\n      </Field>\n      <ErrorMessage component={TextError} name={name} />\n    </div>\n  )\n}\n\nexport default Select\n","import React from 'react'\nimport { Field, ErrorMessage } from 'formik'\nimport TextError from \"../../TextError/TextError\";\n\nfunction RadioButtons (props) {\n  const { label, name, options, ...rest } = props\n  return (\n    <div className='form-control'>\n      <label>{label}</label>\n      <Field name={name} >\n        {({ field }) => {\n          return options.map(option => {\n            return (\n              <React.Fragment key={option.key}>\n                <input\n                  type='radio'\n                  id={option.value}\n                  {...field}\n                  {...rest}\n                  value={option.value}\n                  checked={field.value === option.value}\n                />\n                <label htmlFor={option.value}>{option.key}</label>\n              </React.Fragment>\n            )\n          })\n        }}\n      </Field>\n      <ErrorMessage component={TextError} name={name} />\n    </div>\n  )\n}\n\nexport default RadioButtons\n","import React from 'react'\nimport { Field, ErrorMessage } from 'formik'\nimport TextError from \"../../TextError/TextError\";\n\nfunction CheckboxGroup (props) {\n  const { label, name, options, ...rest } = props\n  return (\n    <div className='form-control'>\n      <label>{label}</label>\n      <Field name={name}>\n        {({ field }) => {\n          return options.map(option => {\n            return (\n              <React.Fragment key={option.key}>\n                <input\n                  type='checkbox'\n                  id={option.value}\n                  {...field}\n                  {...rest}\n                  value={option.value}\n                  checked={field.value.includes(option.value)}\n                />\n                <label htmlFor={option.value}>{option.key}</label>\n              </React.Fragment>\n            )\n          })\n        }}\n      </Field>\n      <ErrorMessage component={TextError} name={name} />\n    </div>\n  )\n}\n\nexport default CheckboxGroup\n","import React from 'react'\nimport Input from './Controls/Input'\nimport Textarea from './Controls/Textarea'\nimport Select from './Controls/Select'\nimport RadioButtons from './Controls/RadioButtons'\nimport CheckboxGroup from './Controls/CheckboxGroup'\n\n/*import DatePicker from './DatePicker'\nimport ChakraInput from './ChakraInput'*/\n\nfunction FormikControl (props) {\n  const { control, ...rest } = props\n  switch (control) {\n    case 'input':\n      return <Input {...rest} />\n    case 'textarea':\n      return <Textarea {...rest} />\n    case 'select':\n      return <Select {...rest} />\n    case 'radio':\n      return <RadioButtons {...rest} />\n    case 'checkboxGroup':\n      return <CheckboxGroup {...rest} />\n   /*case 'date':\n      return <DatePicker {...rest} />*/\n    /*case 'chakraInput':\n      return <ChakraInput {...rest} />*/\n    default:\n      return null\n  }\n}\n\nexport default FormikControl\n","import React from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state) => {\r\n    return{\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Navigate to=\"/login\"/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__18WKA\",\"dialogsItems\":\"Dialogs_dialogsItems__1Zh3K\",\"messages\":\"Dialogs_messages__3wJwf\",\"message\":\"Dialogs_message__ZOLJ-\",\"its\":\"Dialogs_its__29gav\",\"my\":\"Dialogs_my__1MyXA\",\"dialog\":\"Dialogs_dialog__1Q_fA\",\"Active\":\"Dialogs_Active__xX2dz\"};","import classes from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <li className={classes.dialog}>\r\n                <NavLink className={(navData) => navData.isActive ? classes.Active : classes.Item}\r\n                         to={\"/dialogs/\" + props.id}>\r\n                    <img src={props.photo}/>\r\n                    <span>{props.name}</span>\r\n                </NavLink>\r\n        </li>\r\n    );\r\n}\r\n\r\n\r\nexport default DialogItem;\r\n","import classes from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n\r\n\r\n    return (\r\n        /*заменить тут как в тетради*/\r\n        <div className={classes.message + \" \" + (props.messageMy ? classes.my : classes.its)}>{props.message}</div>\r\n    );\r\n}\r\n\r\nexport default Message;\r\n","import classes from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport React from \"react\";\r\nimport {Formik, Form, ErrorMessage, Field} from 'formik'\r\nimport * as Yup from \"yup\";\r\nimport FormikControl from \"../common/FormikControl/FormikControl\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n    let messageElements = state.messages.map(m => <Message message={m.message} id={m.id}\r\n                                                           messageMy={m.messageMy} key={m.id}/>);\r\n    let dialogElements = state.dialogs.map(dialog => <DialogItem name={dialog.name} id={dialog.id}\r\n                                                                 photo={dialog.photo} key={dialog.id}/>);\r\n\r\n    /* If unauthorized user */\r\n\r\n    return (\r\n        <div\r\n            className={classes.dialogs}>\r\n            <div\r\n                className={classes.dialogsItems}>\r\n                <ul>\r\n                    {dialogElements}\r\n                </ul>\r\n            </div>\r\n            <div>\r\n                <div className={classes.messages}>\r\n                    {messageElements}\r\n                </div>\r\n                <AddMessageForm sendMessage={props.sendMessage}/>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n};\r\nconst AddMessageForm = (props) => {\r\n    const initialValues = {\r\n        newMessageBody: ''\r\n    }\r\n    const validationSchema = Yup.object({\r\n        newMessageBody: Yup.string().required('Required')\r\n    });\r\n    const onSubmit = (values, submitProps) => {\r\n        props.sendMessage(values.newMessageBody);\r\n        console.log('Submit', values)\r\n        submitProps.resetForm();\r\n    }\r\nreturn (\r\n    <Formik initialValues={initialValues} onSubmit={onSubmit} validationSchema={validationSchema}>\r\n        {formik => {\r\n            return (\r\n                <Form>\r\n                    <div>\r\n                        <FormikControl control=\"textarea\" placeholder='Enter your message' name=\"newMessageBody\"/>\r\n                    </div>\r\n                    <div>\r\n                        <button type='submit' disabled={!formik.isValid}>Send</button>\r\n                    </div>\r\n                </Form>\r\n            )\r\n        }}\r\n    </Formik>\r\n);\r\n}\r\n\r\n\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport {sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n// const DialogsContainer = (props) => {\r\n//\r\n//     let state = props.store.getState().dialogsPage;\r\n//\r\n//\r\n//     let onSendMessageClick = () => {\r\n//         props.store.dispatch(sendMessageCreator());\r\n//     }\r\n//\r\n//\r\n//     let onNewMessageChange = (body) => {\r\n//         props.store.dispatch(updateNewMessageBodyCreator(body));\r\n//     }\r\n//\r\n//     return (\r\n//         <Dialogs sendMessage={onSendMessageClick} updateNewMessageBody ={onNewMessageChange}\r\n//                 dialogsPage={state}/>\r\n//     );\r\n//\r\n// };\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return{\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps =(dispatch) => {\r\n    return{\r\n        sendMessage: (newMessageBody) =>{\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/*HOC*/\r\n// let AuthRedirectComponent =  withAuthRedirect(Dialogs);\r\n//\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n;\r\n","import React from \"react\";\r\nimport classes from \"./TextError.module.css\"\r\nconst TextError = (props) => {\r\n\r\n    return(\r\n      <div  className={classes.error}>\r\n          {props.children}\r\n      </div>\r\n    );\r\n}\r\nexport default TextError;"],"sourceRoot":""}